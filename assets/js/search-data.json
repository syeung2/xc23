{
  
    
        "post0": {
            "title": "Javascript Inputs using a Grade Calculator",
            "content": "The code segment below builds the container for the output and input for the grade calculator. . Read more here . &lt;div class=&quot;container bg-primary&quot;&gt; &lt;header class=&quot;pb-3 mb-4 border-bottom border-primary text-dark&quot;&gt; &lt;span class=&quot;fs-4&quot;&gt;Grade Calculator&lt;/span&gt; &lt;/header&gt; &lt;form&gt; &lt;!-- Totals --&gt; &lt;div class=&quot;form-group row&quot;&gt; Total : &lt;span id=&quot;total&quot; class=&quot;label label-primary&quot;&gt;0.0&lt;/span&gt; Count : &lt;span id=&quot;count&quot; class=&quot;label label-primary&quot;&gt;0.0&lt;/span&gt; Average : &lt;span id=&quot;average&quot; class=&quot;label label-primary&quot;&gt;0.0&lt;/span&gt; &lt;/div&gt; &lt;!-- Rows --&gt; &lt;div class=&quot;form-group row&quot;&gt; Input scores, press tab to add new number: &lt;div id=&quot;scores&quot;&gt; &lt;input onblur=&quot;calculator()&quot; type=&quot;text&quot; name=&quot;score&quot; id=&quot;score0&quot;/&gt;&lt;br&gt; &lt;!-- javascript generated inputs --&gt; &lt;/div&gt; &lt;/div&gt; &lt;/form&gt; &lt;/div&gt; . The code below creates the function that creates a new input line. . Additional Resources: . Create Element | Set Attribute | . const scoresContainer = document.getElementById(&quot;scores&quot;); // Creates new input line function newInputLine(index) { // Prepare new input line var input = document.createElement(&quot;input&quot;); // input element var br = document.createElement(&quot;br&quot;); // line break element // Setup input line attributes input.setAttribute(&#39;onblur&#39;, &quot;calculator()&quot;); input.setAttribute(&#39;type&#39;, &quot;text&quot;); input.setAttribute(&#39;name&#39;, &quot;score&quot;); input.setAttribute(&#39;id&#39;, &quot;score&quot; + index); // Add input and line break to page scoresContainer.appendChild(input); scoresContainer.appendChild(br); } . The code below creates the function calculator which stores and calculates the total, count, and average of the user inputs. . Additional Resources: . Get Elements by ID | Get Elements by Name | . // Calculates totals function calculator(){ var array = document.getElementsByName(&#39;score&#39;); // setup array of scores if (array[array.length-1].value.length != 0) { // input cell has a value // algorithm to calculate results var total = 0; // running total for(var i = 0; i &lt; array.length; i++){ // iterate through array if(parseFloat(array[i].value)) // convert to float total += parseFloat(array[i].value); // add to running total } // update totals document.getElementById(&#39;total&#39;).innerHTML = total.toFixed(2); document.getElementById(&#39;count&#39;).innerHTML = array.length; document.getElementById(&#39;average&#39;).innerHTML = (total / array.length).toFixed(2); // make a new input line newInputLine(array.length); } // Set cursor focus on last element; this could be new or unchanged element document.getElementById(&quot;score&quot; + (array.length-1)).focus(); } . Hacks . Getting a user input can be useful in other ways: . Looking for a single element in an API, ie Stock in Stock API or BTC in digital coin API, or City in Weather API | Record name, then you could use name input to retrieve something about them from multiple RapidAPI. | Save name and input, like grades, and send data to backend to be recorded, saved, and then retrieved when they enter name on next usage | .",
            "url": "https://syeung2.github.io/xc23/techtalk/javascriptinput",
            "relUrl": "/techtalk/javascriptinput",
            "date": " • Oct 24, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Score_calculator",
            "content": "Score Calculator . Del Norte . Score: 0 . Mt Carmel . Score: 0 . Poway . Score: 0 . Rancho Bernardo . Score: 0 . San Marcos . Score: 0 . Westview . Score: 0 .",
            "url": "https://syeung2.github.io/xc23/2022/10/23/score_calculator.html",
            "relUrl": "/2022/10/23/score_calculator.html",
            "date": " • Oct 23, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Javascript Web Page using an API",
            "content": "",
            "url": "https://syeung2.github.io/xc23/jswp",
            "relUrl": "/jswp",
            "date": " • Oct 17, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Title",
            "content": "def time_in_seconds(time): splits = time.split(&quot;:&quot;) seconds = float(splits[0]) * 60 + float(splits[1]) return seconds def file_to_seconds(file): times = [] f = open(file) for x in f.readlines(): times.append(time_in_seconds(x)) f.close() return times def print_lines(times): for i in times: print(i) print_lines(file_to_seconds(&quot;text_files/test.txt&quot;)) . 1199.78 1224.03 1264.99 1273.54 1318.37 1326.42 1395.4 1192.24 1262.54 1287.35 1291.59 1308.25 . def time_in_minutes(time): time = float(time) / 60 timeCo = str(time) timeCo = timeCo.split(&quot;.&quot;) minutes = timeCo[0] seconds = &quot;0.&quot; + str(timeCo[1]) seconds = float(seconds) * 60 seconds = round(seconds,2) if seconds &gt; 10: times = str(minutes) + &quot;:&quot; + str(seconds) else: times = str(minutes) + &quot;:0&quot; + str(seconds) return times def file_to_minutes(file): times = [] f = open(file) for x in f.readlines(): times.append(time_in_minutes(x)) f.close() return times def print_lines(times): for i in times: print(i) print_lines(file_to_minutes(&quot;text_files/test.txt&quot;)) . 17:35.87 17:36.65 17:42.43 17:43.7 18:04.62 18:17.54 18:21.21 18:22.92 18:25.39 18:26.19 18:43.2 18:43.67 18:43.96 18:44.63 18:49.71 18:54.1 19:03.13 19:09.34 19:12.16 19:20.43 19:26.07 19:41.34 19:41.83 19:44.12 19:53.66 19:55.68 20:01.57 20:05.27 20:09.14 20:09.78 20:32.39 20:32.9 20:35.82 20:50.29 20:57.06 21:12.34 21:13.51 21:42.56 21:50.49 21:58.11 23:27.46 19:11.79 19:35.07 20:14.39 20:22.6 21:05.64 21:13.36 22:19.58 19:04.55 20:12.04 20:35.86 20:39.93 20:55.92 .",
            "url": "https://syeung2.github.io/xc23/2022/10/13/time_converter.html",
            "relUrl": "/2022/10/13/time_converter.html",
            "date": " • Oct 13, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "Title",
            "content": "import tkinter as tk window = tk.Tk() . TclError Traceback (most recent call last) /home/syeung2/vscode/xc22/_notebooks/2022-10-11-team_score.ipynb Cell 1 in &lt;cell line: 3&gt;() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/syeung2/vscode/xc22/_notebooks/2022-10-11-team_score.ipynb#W1sdnNjb2RlLXJlbW90ZQ%3D%3D?line=0&#39;&gt;1&lt;/a&gt; import tkinter as tk -&gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/syeung2/vscode/xc22/_notebooks/2022-10-11-team_score.ipynb#W1sdnNjb2RlLXJlbW90ZQ%3D%3D?line=2&#39;&gt;3&lt;/a&gt; window = tk.Tk() File ~/anaconda3/lib/python3.9/tkinter/__init__.py:2270, in Tk.__init__(self, screenName, baseName, className, useTk, sync, use) 2268 baseName = baseName + ext 2269 interactive = False -&gt; 2270 self.tk = _tkinter.create(screenName, baseName, className, interactive, wantobjects, useTk, sync, use) 2271 if useTk: 2272 self._loadtk() TclError: no display name and no $DISPLAY environment variable . def get_meet_scores(): teamList = {} team = &quot;&quot; count = 1 scores = [] exists = 0 final = [] while team != &quot;done&quot;: team = input() if team != &quot;done&quot;: if len(teamList.keys()) == 0: scores.append(count) count += 1 teamList.update({team:scores}) else: for key in teamList.keys(): if team == key: exists = 1 scores = teamList[team] if len(scores) &lt; 7: scores.append(count) count += 1 if exists == 0: scores = [] scores.append(count) count += 1 exists = 0 teamList.update({team:scores}) for k,v in teamList.items(): print(v) if len(v) &gt; 4: score = v[0] + v[1] + v[2] + v[3] + v[4] final.append((k, score)) print(final) get_meet_scores() . [1, 7, 8, 9, 10] [2, 3, 4, 5, 6] [(&#39;a&#39;, 35), (&#39;b&#39;, 20)] .",
            "url": "https://syeung2.github.io/xc23/2022/10/11/team_score.html",
            "relUrl": "/2022/10/11/team_score.html",
            "date": " • Oct 11, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "Title",
            "content": "def format_results(resultsin, resultsout): newList = [] final = [] counter = 0 f = open(resultsin) for x in f.readlines(): if counter == 0: newString = x.rstrip() counter = 1 else: newString = newString + &quot; t&quot; + x.rstrip() counter = 0 newList.append(newString) for i in newList: i = i.replace(&quot;.&quot;,&quot;:&quot;) id = i.rsplit(&quot; t&quot;) id.pop(0) id.pop(0) #comment out for single place id.pop(2) final.append(id) f.close() with open(resultsout, &quot;w&quot;) as f: for line in final: f.write(line[1] + &quot; t&quot; + line[0] + &quot; t&quot; + line[3] + &quot; t&quot; + line[2] + &quot;0&quot; + &quot; n&quot;) f.close() format_results(&quot;text_files/test.txt&quot;, &quot;text_files/kitcarson.txt&quot;) .",
            "url": "https://syeung2.github.io/xc23/2022/10/05/xctimes.html",
            "relUrl": "/2022/10/05/xctimes.html",
            "date": " • Oct 5, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "Python RapidAPI",
            "content": "Python, RapidAPI Terms . APIs and tooling like Jupyter docs allows many opportunities in fields like Data Science. As more and more developers use APIs, they build standards in how you setup a client, send requests and receive information... . Covid19 RapidAPI Example . To begin the API journey. You need to find an API provider. . RapidAPI is a great option. You must setup and account, but there are many free options. | Goto this page for starters, the Corona virus World and India data- Under Code Snippets pick Python - Requests | . RapidAPI, you will select Python Requests type of code to work with you Notebook. . The url is the endpoint to which the API is directed | The headers is a dictionary data structure to send special messaging to the endpoint | The requests.request() python function is used to send a request and retrieve their responses | The response variable receives result of of the request in JSON text | . Next step, is to format the response according to your data science needs . &quot;&quot;&quot; Requests is a HTTP library for the Python programming language. The goal of the project is to make HTTP requests simpler and more human-friendly. &quot;&quot;&quot; import requests &quot;&quot;&quot; RapidAPI is the world&#39;s largest API Marketplace. Developers use Rapid API to discover and connect to thousands of APIs. &quot;&quot;&quot; url = &quot;https://corona-virus-world-and-india-data.p.rapidapi.com/api&quot; headers = { &#39;x-rapidapi-key&#39;: &quot;dec069b877msh0d9d0827664078cp1a18fajsn2afac35ae063&quot;, &#39;x-rapidapi-host&#39;: &quot;corona-virus-world-and-india-data.p.rapidapi.com&quot; } # Request Covid Data response = requests.request(&quot;GET&quot;, url, headers=headers) # print(response.text) # uncomment this line to see raw data # This code looks for &quot;world data&quot; print(&quot;World Totals&quot;) world = response.json().get(&#39;world_total&#39;) # turn response to json() so we can extract &quot;world_total&quot; for key, value in world.items(): # this finds key, value pairs in country print(key, value) print() # This code looks for USA in &quot;countries_stats&quot; print(&quot;Country Totals&quot;) countries = response.json().get(&#39;countries_stat&#39;) for country in countries: # countries is a list if country[&quot;country_name&quot;] == &quot;USA&quot;: # this filters for USA for key, value in country.items(): # this finds key, value pairs in country print(key, value) . World Totals total_cases 509,268,964 new_cases 204,268 total_deaths 6,242,509 new_deaths 630 total_recovered 461,827,849 active_cases 41,198,606 serious_critical 42,510 total_cases_per_1m_population 65,334 deaths_per_1m_population 800.9 statistic_taken_at 2022-04-24 11:18:01 Country Totals country_name USA cases 82,649,779 deaths 1,018,316 region total_recovered 80,434,925 new_deaths 0 new_cases 0 serious_critical 1,465 active_cases 1,196,538 total_cases_per_1m_population 247,080 deaths_per_1m_population 3,044 total_tests 1,000,275,726 tests_per_1m_population 2,990,303 . Digital Coin Example . This example provides digital coin feedback (ie Bitcoin). It include popularity, price, symbols, etc. . A valid X-RapidAPI-Key is required. Look in code for link to RapidAPI page | Read all comments in code for further guidance | . # RapidAPI page https://rapidapi.com/Coinranking/api/coinranking1/ # Begin Rapid API Code import requests url = &quot;https://coinranking1.p.rapidapi.com/coins&quot; querystring = {&quot;referenceCurrencyUuid&quot;:&quot;yhjMzLPhuIDl&quot;,&quot;timePeriod&quot;:&quot;24h&quot;,&quot;tiers[0]&quot;:&quot;1&quot;,&quot;orderBy&quot;:&quot;marketCap&quot;,&quot;orderDirection&quot;:&quot;desc&quot;,&quot;limit&quot;:&quot;50&quot;,&quot;offset&quot;:&quot;0&quot;} headers = { &quot;X-RapidAPI-Key&quot;: &quot;jcmbea0fa2ff5msh7f14bf69be38ca6p175482jsn6c4988114560&quot;, # place your key here &quot;X-RapidAPI-Host&quot;: &quot;coinranking1.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers, params=querystring) print(response.text) # End Rapid API Code json = response.json() # convert response to python json object # Observe data from an API. This is how data transports over the internet in a &quot;JSON&quot; text form # - The JSON &quot;text&quot; is formed in dictionary {} and list [] divisions # - To read the result, Data Scientist of Developer converts JSON into human readable form # - Review the first line, look for the keys -- &quot;status&quot; and &quot;data&quot; . {&#34;message&#34;:&#34;You are not subscribed to this API.&#34;} . Formatting Digital Coin example . JSON text transferred from the API in the previous cell was converted to a Python Dictionary called json. The &quot;coins&quot; in the dictionary contain a list of the most relevant data. Look at the code and comments to see how the original text is turned into something understandable. Additionally, there are error check to make sure we are starting the code with the expectation that the API was run correctly. . &quot;&quot;&quot; This cell is dependent on valid run of API above. - try and except code is making sure &quot;json&quot; was properly run above - inside second try is code that is used to process Coin API data Note. Run this cell repeatedly to format data without re-activating API &quot;&quot;&quot; try: print(&quot;JSON data is Python type: &quot; + str(type(json))) try: # Extracting Coins JSON status, if the API worked status = json.get(&#39;status&#39;) print(&quot;API status: &quot; + status) print() # Extracting Coins JSON data, data about the coins data = json.get(&#39;data&#39;) # Procedural abstraction of Print code for coins def print_coin(c): print(c[&quot;symbol&quot;], c[&quot;price&quot;]) print(&quot;Icon Url: &quot; + c[&quot;iconUrl&quot;]) print(&quot;Rank Url: &quot; + c[&quot;coinrankingUrl&quot;]) # Coins data was observed to be a list for coin in data[&#39;coins&#39;]: print_coin(coin) print() except: print(&quot;Did you insert a valid key in X-RapidAPI-Key of API cell above?&quot;) print(json) except: print(&quot;This cell is dependent on running API call in cell above!&quot;) . JSON data is Python type: &lt;class &#39;dict&#39;&gt; Did you insert a valid key in X-RapidAPI-Key of API cell above? {&#39;message&#39;: &#39;You are not subscribed to this API.&#39;} . Go deeper into APIs . Web Development vs Jupyter Notebook. A notebook is certainly a great place to start. But, for your end of Trimester project we want you to build the skill to reference and use APIs within your Project. Here are some resources to get you started with this journey. . In the Nighthawk Coders APCSP you can find an Overview and Examples using APIs:APCSP APIs menu- Using Covid RapidAPI JavaScript frontend API code in APCSP Fastpages GitHub repo: https://github.com/nighthawkcoders/APCSP/blob/master/_posts/2022-07-10-PBL-rapidapi.md | . | Making a Jokes API (this will next API tech talk) Frontend. JavaScript frontend code in APCSP fastpages GitHub repo: https://github.com/nighthawkcoders/APCSP/blob/master/_posts/2022-07-10-PBL-jokes.md | Backend Endpoints. Python code that allows Frontend access: https://github.com/nighthawkcoders/flask_portfolio/blob/main/api.py | Backend Jokes Management. Python code that support Create, Read, Update, Delete (CRUD): https://github.com/nighthawkcoders/flask_portfolio/blob/main/model_jokes.py | . | . Hacks . Find and use an API as part of your project. An API and a little coding logic will be a big step toward getting meaningful data for a project. There are many API providers, find one that might work for your project to complete this hack. When picking an API you are looking for something that will work with either JavaScript Fetch or Python Request. Here are some samples, these are not qualified in any way. . RapidAPI- GitHub Project | No Key APIs Article | Twitter Developer | Google Developer | Reddit Developer | . Show API and format results in either Web Page or Jupyter Notebook. Ultimately, I will expect that we do APIs in backend (Python/Flask). However, for this Hack you can pick your preference. We will discuss pros and cons in next API tech talk. .",
            "url": "https://syeung2.github.io/xc23/techtalk/rapidapi",
            "relUrl": "/techtalk/rapidapi",
            "date": " • Oct 3, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "Big Idea 1 'Identifying and Correcting Errors'",
            "content": "College Board Big Idea 1 . Identifying and Correcting Errors (Unit 1.4) . Become familiar with types of errors and strategies to fixing them . Lightly Review Videos and take notes on topics with Blog | Complete assigned MCQ questions | . Here are some code segments you can practice fixing: . alphabet = &quot;abcdefghijklmnopqrstuvwxyz&quot; alphabetList = [] for i in alphabet: alphabetList.append(i) print(alphabetList) . The intended outcome is to determine where the letter is in the alphabet using a while loop . What is a good test case to check the current outcome? Why? | Make changes to get the intended outcome. | . letter = input(&quot;What letter would you like to check?&quot;) i = 0 while i &lt; 26: if alphabetList[i] == letter: print(&quot;The letter &quot; + letter + &quot; is the &quot; + str(i) + &quot; letter in the alphabet&quot;) i += 1 . The intended outcome is to determine where the letter is in the alphabet using a for loop . What is a good test case to check the current outcome? Why? | Make changes to get the intended outcome. | . letter = input(&quot;What letter would you like to check?&quot;) for i in alphabetList: count = 0 if i == letter: print(&quot;The letter &quot; + letter + &quot; is the &quot; + str(count) + &quot; letter in the alphabet&quot;) count += 1 . This code outputs the even numbers from 0 - 10 using a while loop. . Analyze this code to determine what can be changed to get the outcome to be odd numbers. (Code block below) | . evens = [] i = 0 while i &lt;= 10: evens.append(i) i += 2 print(evens) . This code should output the odd numbers from 0 - 10 using a while loop. . odds = [] i = 0 while i &lt;= 10: odds.append(i) i += 2 print(odds) . This code outputs the even numbers from 0 - 10 using a for loop. . Analyze this code to determine what can be changed to get the outcome to be odd numbers. (Code block below) | . numbers = [0,1,2,3,4,5,6,7,8,9,10] evens = [] for i in numbers: if (numbers[i] % 2 == 0): evens.append(numbers[i]) print(evens) . This code should output the odd numbers from 0 - 10 using a for loop. . numbers = [0,1,2,3,4,5,6,7,8,9,10] odds = [] for i in numbers: if (numbers[i] % 2 == 0): odds.append(numbers[i]) print(odds) . The intended outcome is printing a number between 1 and 100 once, if it is a multiple of 2 or 5 . What values are outputted incorrectly. Why? | Make changes to get the intended outcome. | . numbers = [] newNumbers = [] i = 0 while i &lt; 100: numbers.append(i) i += 1 for i in numbers: if numbers[i] % 5 == 0: newNumbers.append(numbers[i]) if numbers[i] % 2 == 0: newNumbers.append(numbers[i]) print(newNumbers) . Challenge . This code segment is at a very early stage of implementation. . What are some ways to (user) error proof this code? | The code should be able to calculate the cost of the meal of the user | . Hint: . write a “single” test describing an expectation of the program of the program | test - input burger, expect output of burger price | run the test, which should fail because the program lacks that feature | write “just enough” code, the simplest possible, to make the test pass | . Then repeat this process until you get program working like you want it to work. . menu = {&quot;burger&quot;: 3.99, &quot;fries&quot;: 1.99, &quot;drink&quot;: 0.99} total = 0 #shows the user the menu and prompts them to select an item print(&quot;Menu&quot;) for k,v in menu.items(): print(k + &quot; $&quot; + str(v)) #why does v have &quot;str&quot; in front of it? #ideally the code should prompt the user multiple times item = input(&quot;Please select an item from the menu&quot;) #code should add the price of the menu items selected by the user print(total) . Hacks . Now is a good time to think about Testing of your teams final project... . What errors may arise in your project? | What are some test cases that can be used? | Make sure to document any bugs you encounter and how you solved the problem. | What are “single” tests that you will perform on your project? Or, your part of the project? As Hack Design and Test plan action … Divide these “single” tests into Issues for Scrum Board prior to coding. FYI, related tests could be in same Issue by using markdown checkboxes to separate tests. | . | .",
            "url": "https://syeung2.github.io/xc23/collegeboard/error",
            "relUrl": "/collegeboard/error",
            "date": " • Oct 3, 2022"
        }
        
    
  
    
        ,"post8": {
            "title": "Lists, Dictionaries, Iteration",
            "content": "Lists and Dictionaries . As a quick review we used variables in the introduction last week. Variables all have a type: String, Integer, Float, List and Dictionary are some key types. In Python, variables are given a type at assignment, Types are important to understand and will impact operations, as we saw when we were required to user str() function in concatenation. . Developers often think of variables as primitives or collections. Look at this example and see if you can see hypothesize the difference between a primitive and a collection. | Take a minute and see if you can reference other elements in the list or other keys in the dictionary. Show output. | # variable of type string print(&quot;What is the variable name/key?&quot;, &quot;value?&quot;, &quot;type?&quot;, &quot;primitive or collection, why?&quot;) name = &quot;John Doe&quot; print(&quot;name&quot;, name, type(name)) print() # variable of type integer print(&quot;What is the variable name/key?&quot;, &quot;value?&quot;, &quot;type?&quot;, &quot;primitive or collection, why?&quot;) age = 18 print(&quot;age&quot;, age, type(age)) print() # variable of type float print(&quot;What is the variable name/key?&quot;, &quot;value?&quot;, &quot;type?&quot;, &quot;primitive or collection, why?&quot;) score = 90.0 print(&quot;score&quot;, score, type(score)) print() # variable of type list (many values in one variable) print(&quot;What is variable name/key?&quot;, &quot;value?&quot;, &quot;type?&quot;, &quot;primitive or collection?&quot;) print(&quot;What is different about the list output?&quot;) langs = [&quot;Python&quot;, &quot;JavaScript&quot;, &quot;Java&quot;] print(&quot;langs&quot;, langs, type(langs), &quot;length&quot;, len(langs)) print(&quot;- langs[0]&quot;, langs[0], type(langs[0])) print() # variable of type dictionary (a group of keys and values) print(&quot;What is the variable name/key?&quot;, &quot;value?&quot;, &quot;type?&quot;, &quot;primitive or collection, why?&quot;) print(&quot;What is different about the dictionary output?&quot;) person = { &quot;name&quot;: name, &quot;age&quot;: age, &quot;score&quot;: score, &quot;langs&quot;: langs } print(&quot;person&quot;, person, type(person), &quot;length&quot;, len(person)) print(&#39;- person[&quot;name&quot;]&#39;, person[&quot;name&quot;], type(person[&quot;name&quot;])) . What is the variable name/key? value? type? primitive or collection, why? name John Doe &lt;class &#39;str&#39;&gt; What is the variable name/key? value? type? primitive or collection, why? age 18 &lt;class &#39;int&#39;&gt; What is the variable name/key? value? type? primitive or collection, why? score 90.0 &lt;class &#39;float&#39;&gt; What is variable name/key? value? type? primitive or collection? What is different about the list output? langs [&#39;Python&#39;, &#39;JavaScript&#39;, &#39;Java&#39;] &lt;class &#39;list&#39;&gt; length 3 - langs[0] Python &lt;class &#39;str&#39;&gt; What is the variable name/key? value? type? primitive or collection, why? What is different about the dictionary output? person {&#39;name&#39;: &#39;John Doe&#39;, &#39;age&#39;: 18, &#39;score&#39;: 90.0, &#39;langs&#39;: [&#39;Python&#39;, &#39;JavaScript&#39;, &#39;Java&#39;]} &lt;class &#39;dict&#39;&gt; length 4 - person[&#34;name&#34;] John Doe &lt;class &#39;str&#39;&gt; . List and Dictionary purpose . Our society is being built on information. List and Dictionaries are used to collect information. Mostly, when information is collected it is formed into patterns. As that pattern is established you will be able collect many instances of that pattern. . List is used to collect many instances of a pattern | Dictionary is used to define data patterns. | Iteration is often used to process through lists. | . To start exploring more deeply into List, Dictionary and Iteration this example will explore constructing a List of people and cars. . As we learned above, a List is a data type: class &#39;list&#39; | A &#39;list&#39; data type has the method &#39;.append(expression)&#39; that allows you to add to the list. A class usually has extra method to support working with its objects/instances. | In the example below, the expression is appended to the &#39;list&#39; is the data type: class &#39;dict&#39; | At the end, you see a fairly complicated data structure. This is a list of dictionaries, or a collection of many similar data patterns. The output looks similar to JavaScript Object Notation (JSON), Jekyll/GitHub pages yml files, FastPages Front Matter. As discussed we will see this key/value patter often, you will be required to understand this data structure and understand the parts. Just believe it is peasy ;) and it will become so. | . InfoDb = [] # InfoDB is a data structure with expected Keys and Values # Append to List a Dictionary of key/values related to a person and cars InfoDb.append({ &quot;FirstName&quot;: &quot;John&quot;, &quot;LastName&quot;: &quot;Mortensen&quot;, &quot;DOB&quot;: &quot;October 21&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;jmortensen@powayusd.com&quot;, &quot;Owns_Cars&quot;: [&quot;2015-Fusion&quot;, &quot;2011-Ranger&quot;, &quot;2003-Excursion&quot;, &quot;1997-F350&quot;, &quot;1969-Cadillac&quot;] }) # Append to List a 2nd Dictionary of key/values InfoDb.append({ &quot;FirstName&quot;: &quot;Sunny&quot;, &quot;LastName&quot;: &quot;Naidu&quot;, &quot;DOB&quot;: &quot;August 2&quot;, &quot;Residence&quot;: &quot;Temecula&quot;, &quot;Email&quot;: &quot;snaidu@powayusd.com&quot;, &quot;Owns_Cars&quot;: [&quot;4Runner&quot;] }) # Print the data structure print(InfoDb) . [{&#39;FirstName&#39;: &#39;John&#39;, &#39;LastName&#39;: &#39;Mortensen&#39;, &#39;DOB&#39;: &#39;October 21&#39;, &#39;Residence&#39;: &#39;San Diego&#39;, &#39;Email&#39;: &#39;jmortensen@powayusd.com&#39;, &#39;Owns_Cars&#39;: [&#39;2015-Fusion&#39;, &#39;2011-Ranger&#39;, &#39;2003-Excursion&#39;, &#39;1997-F350&#39;, &#39;1969-Cadillac&#39;]}, {&#39;FirstName&#39;: &#39;Sunny&#39;, &#39;LastName&#39;: &#39;Naidu&#39;, &#39;DOB&#39;: &#39;August 2&#39;, &#39;Residence&#39;: &#39;Temecula&#39;, &#39;Email&#39;: &#39;snaidu@powayusd.com&#39;, &#39;Owns_Cars&#39;: [&#39;4Runner&#39;]}] . def getInfo(db): cars = [] i = 1 fn = input(&quot;Enter First Name: &quot;) ln = input(&quot;Enter Last Name: &quot;) dob = input(&quot;Enter DOB: &quot;) res = input(&quot;Enter Residence: &quot;) em = input(&quot;Enter Your Email:&quot;) while i &gt; 0: c = input(&quot;Enter owned cars, type exit to quit: &quot;) if c.lower() == &quot;exit&quot;: if len(cars) == 0: cars.append(&quot;none&quot;) i = 0 else: cars.append(c) db.append({&quot;FirstName&quot;: fn, &quot;LastName&quot;: ln, &quot;DOB&quot;: dob, &quot;Residence&quot;: res, &quot;Email&quot;: em, &quot;Owns_Cars&quot;: cars }) . Formatted output of List/Dictionary - for loop . Managing data in Lists and Dictionaries is for the convenience of passing the data across the internet, to applications, or preparing it to be stored into a database. It is a great way to exchange data between programs and programmers. Exchange of data between programs includes the data type the method/function and the format of the data type. These concepts are key to learning how to write functions, receive, and return data. This process is often referred to as an Application Programming Interface (API). . Next, we will take the stored data and output it within our notebook. There are multiple steps to this process... . Preparing a function to format the data, the print_data() function receives a parameter called &quot;d_rec&quot; short for dictionary record. It then references different keys within [] square brackets. | Preparing a function to iterate through the list, the for_loop() function uses an enhanced for loop that pull record by record out of InfoDb until the list is empty. Each time through the loop it call print_data(record), which passes the dictionary record to that function. | Finally, you need to activate your function with the call to the defined function for_loop(). Functions are defined, not activated until they are called. By placing for_loop() at the left margin the function is activated. | . # print function: given a dictionary of InfoDb content def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) # using comma puts space between values print(&quot; t&quot;, &quot;Residence:&quot;, d_rec[&quot;Residence&quot;]) # t is a tab indent print(&quot; t&quot;, &quot;Birth Day:&quot;, d_rec[&quot;DOB&quot;]) print(&quot; t&quot;, &quot;Cars: &quot;, end=&quot;&quot;) # end=&quot;&quot; make sure no return occurs print(&quot;, &quot;.join(d_rec[&quot;Owns_Cars&quot;])) # join allows printing a string list with separator print() # for loop algorithm iterates on length of InfoDb def for_loop(): print(&quot;For loop output n&quot;) for record in InfoDb: print_data(record) getInfo(InfoDb) for_loop() . For loop output John Mortensen Residence: San Diego Birth Day: October 21 Cars: 2015-Fusion, 2011-Ranger, 2003-Excursion, 1997-F350, 1969-Cadillac Sunny Naidu Residence: Temecula Birth Day: August 2 Cars: 4Runner john doe Residence: here Birth Day: 1/3/33 Cars: car1, car2 . Alternate methods for iteration - while loop . In coding, there are usually many ways to achieve the same result. Defined are functions illustrating using index to reference records in a list, these methods are called a &quot;while&quot; loop and &quot;recursion&quot;. . The while_loop() function contains a while loop, &quot;while i &lt; len(InfoDb):&quot;. This counts through the elements in the list start at zero, and passes the record to print_data() | . # while loop algorithm contains an initial n and an index incrementing statement (n += 1) def while_loop(): print(&quot;While loop output n&quot;) i = 0 while i &lt; len(InfoDb): record = InfoDb[i] print_data(record) i += 1 return while_loop() . While loop output John Mortensen Residence: San Diego Birth Day: October 21 Cars: 2015-Fusion, 2011-Ranger, 2003-Excursion, 1997-F350, 1969-Cadillac Sunny Naidu Residence: Temecula Birth Day: August 2 Cars: 4Runner . Calling a function repeatedly - recursion . This final technique achieves looping by calling itself repeatedly. . recursive_loop(i) function is primed with the value 0 on its activation with &quot;recursive_loop(0)&quot; | the last statement indented inside the if statement &quot;recursive_loop(i + 1)&quot; activates another call to the recursive_loop(i) function, each time i is increasing | ultimately the &quot;if i &lt; len(InfoDb):&quot; will evaluate to false and the program ends | . # recursion algorithm loops incrementing on each call (n + 1) until exit condition is met def recursive_loop(i): if i &lt; len(InfoDb): record = InfoDb[i] print_data(record) recursive_loop(i + 1) return print(&quot;Recursive loop output n&quot;) recursive_loop(0) . Recursive loop output John Mortensen Residence: San Diego Birth Day: October 21 Cars: 2015-Fusion, 2011-Ranger, 2003-Excursion, 1997-F350, 1969-Cadillac Sunny Naidu Residence: Temecula Birth Day: August 2 Cars: 4Runner . Hacks . Add a couple of records to the InfoDb | Try to do a for loop with an index | Pair Share code somethings creative or unique, with loops and data. Hints... Would it be possible to output data in a reverse order? | Are there other methods that can be performed on lists? | Could you create new or add to dictionary data set? Could you do it with input? | Make a quiz that stores in a List of Dictionaries. | . | .",
            "url": "https://syeung2.github.io/xc23/collegeboard/python_lists",
            "relUrl": "/collegeboard/python_lists",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post9": {
            "title": "My Bash File",
            "content": "echo &quot;Using conditional statement to create a project directory and project&quot; # Variable section export project_dir=$HOME/vscode # change vscode to different name to test git clone export project=$project_dir/APCSP # change APCSP to name of project from git clone export project_repo=&quot;https://github.com/nighthawkcoders/APCSP.git&quot; # change to project of choice cd ~ # start in home directory # Conditional block to make a project directory if [ ! -d $project_dir ] then echo &quot;Directory $project_dir does not exists... makinng directory $project_dir&quot; mkdir -p $project_dir fi echo &quot;Directory $project_dir exists.&quot; # Conditional block to git clone a project from project_repo if [ ! -d $project ] then echo &quot;Directory $project does not exists... cloning $project_repo&quot; cd $project_dir git clone $project_repo cd ~ fi echo &quot;Directory $project exists.&quot; . Using conditional statement to create a project directory and project Directory /home/syeung2/vscode exists. Directory /home/syeung2/vscode/APCSP does not exists... cloning https://github.com/nighthawkcoders/APCSP.git Cloning into &#39;APCSP&#39;... remote: Enumerating objects: 9173, done. remote: Counting objects: 100% (748/748), done. remote: Compressing objects: 100% (313/313), done. remote: Total 9173 (delta 454), reused 702 (delta 414), pack-reused 8425 Receiving objects: 100% (9173/9173), 16.49 MiB | 12.58 MiB/s, done. Resolving deltas: 100% (4949/4949), done. Directory /home/syeung2/vscode/APCSP exists. . echo &quot;Navigate to project, then navigate to area wwhere files were cloned&quot; cd $project pwd echo &quot;&quot; echo &quot;list top level or root of files with project pulled from github&quot; ls echo &quot;&quot; echo &quot;list again with hidden files pulled from github&quot; ls -a # hidden files flag, many shell commands have flags echo &quot;&quot; echo &quot;list all files in long format&quot; ls -al # all files and long listing . Navigate to project, then navigate to area wwhere files were cloned /home/syeung2/vscode/APCSP list top level or root of files with project pulled from github Gemfile _action_files _layouts _posts docker-compose.yml LICENSE _config.yml _notebooks _sass images Makefile _fastpages_docs _pages _word index.html README.md _includes _plugins assets python list again with hidden files pulled from github . .gitignore _action_files _pages docker-compose.yml .. .vscode _config.yml _plugins images .devcontainer.json Gemfile _fastpages_docs _posts index.html .git LICENSE _includes _sass python .gitattributes Makefile _layouts _word .github README.md _notebooks assets list all files in long format total 120 drwxr-xr-x 18 syeung2 syeung2 4096 Aug 25 22:34 . drwxr-xr-x 4 syeung2 syeung2 4096 Aug 25 22:34 .. -rw-r--r-- 1 syeung2 syeung2 420 Aug 25 22:34 .devcontainer.json drwxr-xr-x 8 syeung2 syeung2 4096 Aug 25 22:34 .git -rw-r--r-- 1 syeung2 syeung2 84 Aug 25 22:34 .gitattributes drwxr-xr-x 4 syeung2 syeung2 4096 Aug 25 22:34 .github -rw-r--r-- 1 syeung2 syeung2 917 Aug 25 22:34 .gitignore drwxr-xr-x 2 syeung2 syeung2 4096 Aug 25 22:34 .vscode -rwxr-xr-x 1 syeung2 syeung2 1304 Aug 25 22:34 Gemfile -rw-r--r-- 1 syeung2 syeung2 11351 Aug 25 22:34 LICENSE -rwxr-xr-x 1 syeung2 syeung2 1422 Aug 25 22:34 Makefile -rwxr-xr-x 1 syeung2 syeung2 3614 Aug 25 22:34 README.md drwxr-xr-x 2 syeung2 syeung2 4096 Aug 25 22:34 _action_files -rw-r--r-- 1 syeung2 syeung2 3716 Aug 25 22:34 _config.yml drwxr-xr-x 2 syeung2 syeung2 4096 Aug 25 22:34 _fastpages_docs drwxr-xr-x 2 syeung2 syeung2 4096 Aug 25 22:34 _includes drwxr-xr-x 2 syeung2 syeung2 4096 Aug 25 22:34 _layouts drwxr-xr-x 3 syeung2 syeung2 4096 Aug 25 22:34 _notebooks drwxr-xr-x 2 syeung2 syeung2 4096 Aug 25 22:34 _pages drwxr-xr-x 2 syeung2 syeung2 4096 Aug 25 22:34 _plugins drwxr-xr-x 2 syeung2 syeung2 4096 Aug 25 22:34 _posts drwxr-xr-x 3 syeung2 syeung2 4096 Aug 25 22:34 _sass drwxr-xr-x 2 syeung2 syeung2 4096 Aug 25 22:34 _word drwxr-xr-x 4 syeung2 syeung2 4096 Aug 25 22:34 assets -rwxr-xr-x 1 syeung2 syeung2 1136 Aug 25 22:34 docker-compose.yml drwxr-xr-x 5 syeung2 syeung2 4096 Aug 25 22:34 images -rw-r--r-- 1 syeung2 syeung2 1061 Aug 25 22:34 index.html drwxr-xr-x 2 syeung2 syeung2 4096 Aug 25 22:34 python . test=“python3” # keyword check=`jupyter kernelspec list | grep $test` # run command n=${#check} # determine length if [[ ${n} &gt; 0 ]]; # testt length then # greater than zero echo “$check” else # less than zero echo “$check” fi . “” . echo &quot;Look for posts&quot; export posts=$project/_posts # _posts inside project cd $posts # this should exist per fastpages pwd # present working directory ls -l # list posts . Look for posts /home/syeung2/vscode/APCSP/_posts total 228 -rw-r--r-- 1 syeung2 syeung2 21306 Aug 25 22:34 2022-06-01-TT160-deploy.md -rw-r--r-- 1 syeung2 syeung2 5861 Aug 25 22:34 2022-07-07-PBL-binary.md -rw-r--r-- 1 syeung2 syeung2 3085 Aug 25 22:34 2022-07-08-PBL-grade_calc.md -rw-r--r-- 1 syeung2 syeung2 3698 Aug 25 22:34 2022-07-08-PBL-graph.md -rw-r--r-- 1 syeung2 syeung2 5729 Aug 25 22:34 2022-07-08-PBL-life.md -rw-r--r-- 1 syeung2 syeung2 14387 Aug 25 22:34 2022-07-08-PBL-snake.md -rw-r--r-- 1 syeung2 syeung2 334 Aug 25 22:34 2022-07-10-PBL-database.md -rw-r--r-- 1 syeung2 syeung2 2908 Aug 25 22:34 2022-07-10-PBL-jokes.md -rw-r--r-- 1 syeung2 syeung2 4046 Aug 25 22:34 2022-07-10-PBL-rapidapi.md -rw-r--r-- 1 syeung2 syeung2 6685 Aug 25 22:34 2022-07-19-PBL-calculator.md -rw-r--r-- 1 syeung2 syeung2 23325 Aug 25 22:34 2022-07-25-CSP-workshop.md -rw-r--r-- 1 syeung2 syeung2 2333 Aug 25 22:34 2022-08-15-TP000-student_score_history.md -rw-r--r-- 1 syeung2 syeung2 4363 Aug 25 22:34 2022-08-15-TP100-pseudo_code.md -rw-r--r-- 1 syeung2 syeung2 7968 Aug 25 22:34 2022-08-15-TR100-tool_setup.md -rw-r--r-- 1 syeung2 syeung2 15409 Aug 25 22:34 2022-08-15-TT100-tools.md -rw-r--r-- 1 syeung2 syeung2 5590 Aug 25 22:34 2022-08-15-TT101-vscode-wsl.md -rw-r--r-- 1 syeung2 syeung2 2155 Aug 25 22:34 2022-08-22-TR110-intro_python.md -rw-r--r-- 1 syeung2 syeung2 5173 Aug 25 22:34 2022-08-22-TT110-fastpages.md -rw-r--r-- 1 syeung2 syeung2 2798 Aug 25 22:34 2022-08-22-TT110-focus.md -rw-r--r-- 1 syeung2 syeung2 2737 Aug 25 22:34 2022-08-29-TR120-data_abstract.md -rw-r--r-- 1 syeung2 syeung2 10683 Aug 25 22:34 2022-08-29-TT120-agile.md -rw-r--r-- 1 syeung2 syeung2 4498 Aug 25 22:34 2022-08-29-TT120-html_fragments.md -rw-r--r-- 1 syeung2 syeung2 9037 Aug 25 22:34 2022-09-05-TP130-create_performance_task.md -rw-r--r-- 1 syeung2 syeung2 7753 Aug 25 22:34 2022-09-05-TP131-create-task-bria.md -rw-r--r-- 1 syeung2 syeung2 8066 Aug 25 22:34 2022-09-05-TR130-creative_development.md -rw-r--r-- 1 syeung2 syeung2 3520 Aug 25 22:34 2022-09-05-TT130-applab.md -rw-r--r-- 1 syeung2 syeung2 720 Aug 25 22:34 README.md .",
            "url": "https://syeung2.github.io/xc23/jupyter/2022/08/25/bash_file.html",
            "relUrl": "/jupyter/2022/08/25/bash_file.html",
            "date": " • Aug 25, 2022"
        }
        
    
  
    
        ,"post10": {
            "title": "Jupyter Notebook",
            "content": "msg = &quot;Hello World&quot; print(msg) . Hello World .",
            "url": "https://syeung2.github.io/xc23/1.a/2022/08/22/JupyterNotebook.html",
            "relUrl": "/1.a/2022/08/22/JupyterNotebook.html",
            "date": " • Aug 22, 2022"
        }
        
    
  
    
        ,"post11": {
            "title": "Grade Calculator",
            "content": "Grade Calculator . Total : 0.0 Count : 0.0 Average : 0.0 Input scores, press tab to add new number:",
            "url": "https://syeung2.github.io/xc23/frontend/grades",
            "relUrl": "/frontend/grades",
            "date": " • Jul 8, 2022"
        }
        
    
  

  
  
      ,"page0": {
          "title": "About Me",
          "content": "This is Mr Yeung’s Blog about running. . PRS . Race Time . 400m . | 0:53 . | . 800m . | 2:02 . | . 1600m . | 4:53 . | . 3200m . | 11:20 . | . 5000m . | 18:41 . | .",
          "url": "https://syeung2.github.io/xc23/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  
      ,"page1": {
          "title": "Schedule",
          "content": "",
          "url": "https://syeung2.github.io/xc23/schedule/",
          "relUrl": "/schedule/",
          "date": ""
      }
      
  

  

  

  

  

  
  

  
  

  
  

  
  

  
  

  
      ,"page11": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://syeung2.github.io/xc23/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}